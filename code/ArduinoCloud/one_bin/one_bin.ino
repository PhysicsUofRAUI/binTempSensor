/* 
  Sketch generated by the Arduino IoT Cloud Thing "Bin One"
  https://create.arduino.cc/cloud/things/acdff5db-845e-42f4-851d-6b8367a3c258 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temperature1;
  float temperature3;
  float temperature2;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>
#include <DHT_U.h>
#include <Adafruit_Sensor.h>

// everything to control the sensors
#define DHTPIN1            5
#define DHTPIN2            4
#define DHTPIN3            6

// the sensor inside the box with arduino
#define DHTPIN4            7

#define DHTTYPE           DHT22

DHT_Unified dht1(DHTPIN1, DHTTYPE);
DHT_Unified dht2(DHTPIN2, DHTTYPE);
DHT_Unified dht3(DHTPIN3, DHTTYPE);
DHT_Unified dht4(DHTPIN4, DHTTYPE);

unsigned long last_time;

// previous temperatures
// Needed so that we can figure out if an alert needs to be
// sent out or not
float prev_1;
float prev_2;
float prev_3;

char server[] = "maker.ifttt.com";

int count;

GSMSSLClient client;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::CONNECT, doThisOnConnect);
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  dht1.begin();
  dht2.begin();
  dht3.begin();
  dht4.begin();

  sensor_t sensor;
  
  prev_1 = -100;
  prev_2 = -100;
  prev_3 = -100;
  
  count = 0;
  
  last_time = millis();
}


void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  if (millis() - last_time > 3600000){
    // Get temperature event
    sensors_event_t event;
    dht1.temperature().getEvent(&event);
    
    if (isnan(event.temperature)) {
      temperature1 = -100.0;
    }
    else {
      temperature1 = event.temperature;
    }
    
    ArduinoCloud.update();
    
    dht2.temperature().getEvent(&event);
    
    if (isnan(event.temperature)) {
      temperature2 = -100.0;
    }
    else {
      temperature2 = event.temperature;
    }
    
    dht3.temperature().getEvent(&event);
    
    if (isnan(event.temperature)) {
      temperature3 = -100.0;
    }
    else {
      temperature3 = event.temperature;
    }
    
    ArduinoCloud.update();
    
    // get the inner temp
    dht4.temperature().getEvent(&event);
    
    if (isnan(event.temperature)) {
      inner_temp = -100.0;
    }
    else {
      inner_temp = event.temperature;
    }
    
    // check if an alert needs to be sent every 24 hours
    if (count == 24)
    {
      ArduinoCloud.update();
      if (prev_1 == -100)
      {
        prev_1 = temperature1;
        prev_2 = temperature2;
        prev_3 = temperature3;
      }
      else
      {
        // Now check if an alert needs to be sent
        if (temperature1 > prev_1 && temperature1 > inner_temp)
        {
          sendEmail("Temperature 1 has increased by " + String(temperature1 - prev_1));
        }
        else if (temperature2 > prev_2 && temperature2 > inner_temp)
        {
          sendEmail("Temperature 1 has increased by " + String(temperature2 - prev_2));
        }
        else if (temperature3 > prev_3 && temperature3 > inner_temp)
        {
          sendEmail("Temperature 3 has increased by " + String(temperature3 - prev_3));
        }
        
        // set the previous temperatures
        prev_1 = temperature1;
        prev_2 = temperature2;
        prev_3 = temperature3;
      }
      
      count = 0;
    }
    
    count = count + 1;
    
    last_time = millis();
  }
}

/*
  When the device is connected collect data and then send
  an email saying it has been connected.
*/
void doThisOnConnect(){
  // Get temperature event
  sensors_event_t event;
  dht1.temperature().getEvent(&event);
  
  if (isnan(event.temperature)) {
    temperature1 = -100.0;
  }
  else {
    temperature1 = event.temperature;
  }
  
  dht2.temperature().getEvent(&event);
  
  if (isnan(event.temperature)) {
    temperature2 = -100.0;
  }
  else {
    temperature2 = event.temperature;
  }
  
  dht3.temperature().getEvent(&event);
  
  if (isnan(event.temperature)) {
    temperature3 = -100.0;
  }
  else {
    temperature3 = event.temperature;
  }
  
  // get the inner temp
  dht4.temperature().getEvent(&event);
  
  if (isnan(event.temperature)) {
    inner_temp = -100.0;
  }
  else {
    inner_temp = event.temperature;
  }
  
  sendEmail("Your device has been connected! If your grain starts heating an email will be sent here.");
}


void sendEmail(String val) {
  String data = "{\"value1\":\"" + val + "\"}";
  
  // Connection to the IFTTT server
  if (client.connectSSL(server, 443)) {
    // Make a HTTP request:
    client.println("POST /trigger/grain_alert/with/key/f7EiyQeli1KwLPmtkd1r0pLAMO5SJjl6pncQbXPy1IY HTTP/1.1"); // Replace "" by your own IFTTT key
    client.println("Host: maker.ifttt.com");
    client.println("Content-Type: application/json");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.print(data);
  }
  else {
    Serial.println("Connection at IFTTT failed");
  }
}
